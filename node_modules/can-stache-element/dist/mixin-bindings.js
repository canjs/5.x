"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var stacheBindings = require("can-stache-bindings");

var keyObservable = require("can-simple-observable/key/key");

var canReflect = require("can-reflect");

var Bind = require("can-bind"); // make sure bindings work


require("can-stache-bindings");

var getValueSymbol = Symbol.for("can.getValue");
var setValueSymbol = Symbol.for("can.setValue");
var lifecycleStatusSymbol = Symbol.for("can.lifecycleStatus");
var metaSymbol = Symbol.for("can.meta");

module.exports = function mixinBindings() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  return (
    /*#__PURE__*/
    function (_Base) {
      _inherits(BindingsClass, _Base);

      function BindingsClass() {
        _classCallCheck(this, BindingsClass);

        return _possibleConstructorReturn(this, _getPrototypeOf(BindingsClass).apply(this, arguments));
      }

      _createClass(BindingsClass, [{
        key: "bindings",
        value: function bindings(_bindings) {
          if (this[metaSymbol] === undefined) {
            this[metaSymbol] = {};
          }

          this[metaSymbol]._connectedBindings = _bindings;
          return this;
        }
      }, {
        key: "initialize",
        value: function initialize(props) {
          var _this = this;

          var savedBindings = this[metaSymbol] && this[metaSymbol]._connectedBindings;

          if (savedBindings) {
            props = props || {};
            var bindingContext = {
              element: this
            };
            var bindings = [];
            canReflect.eachKey(savedBindings, function (parent, propName) {
              var canGetParentValue = parent != null && !!parent[getValueSymbol];
              var canSetParentValue = parent != null && !!parent[setValueSymbol]; // If we can get or set the value, then we’ll create a binding

              if (canGetParentValue === true || canSetParentValue) {
                // Create an observable for reading/writing the viewModel
                // even though it doesn't exist yet.
                var child = keyObservable(_this, propName); // Create the binding similar to what’s in can-stache-bindings

                var canBinding = new Bind({
                  child: child,
                  parent: parent,
                  queue: "domUI",
                  //!steal-remove-start
                  // For debugging: the names that will be assigned to the updateChild
                  // and updateParent functions within can-bind
                  updateChildName: "update <" + _this.nodeName.toLowerCase() + ">." + propName,
                  updateParentName: "update " + canReflect.getName(parent) + " from <" + _this.nodeName.toLowerCase() + ">." + propName //!steal-remove-end

                });
                bindings.push({
                  binding: canBinding,
                  siblingBindingData: {
                    parent: {
                      source: "scope",
                      exports: canGetParentValue
                    },
                    child: {
                      source: "viewModel",
                      exports: canSetParentValue,
                      name: propName
                    },
                    bindingAttributeName: propName
                  }
                });
              } else {
                // Can’t get or set the value, so assume it’s not an observable
                props[propName] = parent;
              }
            }); // Initialize the viewModel.  Make sure you
            // save it so the observables can access it.

            var initializeData = stacheBindings.behaviors.initializeViewModel(bindings, props, function (properties) {
              _get(_getPrototypeOf(BindingsClass.prototype), "initialize", _this).call(_this, properties);

              return _this;
            }, bindingContext);

            this[metaSymbol]._connectedBindingsTeardown = function () {
              for (var attrName in initializeData.onTeardowns) {
                initializeData.onTeardowns[attrName]();
              }
            };

            this[metaSymbol].other = true;
          } else {
            if (_get(_getPrototypeOf(BindingsClass.prototype), "initialize", this)) {
              _get(_getPrototypeOf(BindingsClass.prototype), "initialize", this).call(this, props);
            }
          }
        }
      }, {
        key: "render",
        value: function render(props, renderOptions, parentNodeList) {
          var viewRoot = this.viewRoot || this;
          viewRoot.innerHTML = "";

          if (_get(_getPrototypeOf(BindingsClass.prototype), "render", this)) {
            _get(_getPrototypeOf(BindingsClass.prototype), "render", this).call(this, props, renderOptions, parentNodeList);
          }
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          if (this[metaSymbol] && this[metaSymbol]._connectedBindingsTeardown) {
            this[metaSymbol]._connectedBindingsTeardown();

            this[metaSymbol]._connectedBindingsTeardown = null;
            this[lifecycleStatusSymbol] = {
              initialized: false,
              rendered: false,
              connected: false,
              disconnected: true
            };
          }

          if (_get(_getPrototypeOf(BindingsClass.prototype), "disconnect", this)) {
            _get(_getPrototypeOf(BindingsClass.prototype), "disconnect", this).call(this);
          }
        }
      }]);

      return BindingsClass;
    }(Base)
  );
};