"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var mixinLifecycleMethods = require("./mixin-lifecycle-methods");

var mixinProps = require("./mixin-props");

var mixinStacheView = require("./mixin-stache-view");

var mixinViewModelSymbol = require("./mixin-viewmodel-symbol");

var mixinBindings = require("./mixin-bindings");

var canStacheBindings = require("can-stache-bindings");

var initializeSymbol = Symbol.for("can.initialize");
var teardownHandlersSymbol = Symbol.for("can.teardownHandlers");

function DeriveElement() {
  var BaseElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;

  var StacheElement =
  /*#__PURE__*/
  function (_mixinLifecycleMethod) {
    _inherits(StacheElement, _mixinLifecycleMethod);

    function StacheElement() {
      _classCallCheck(this, StacheElement);

      return _possibleConstructorReturn(this, _getPrototypeOf(StacheElement).apply(this, arguments));
    }

    _createClass(StacheElement, [{
      key: initializeSymbol,
      value: function value(el, tagData) {
        var teardownBindings = canStacheBindings.behaviors.viewModel(el, tagData, function makeViewModel(initialViewmodelData) {
          el.render(initialViewmodelData, {}, tagData.parentNodeList);
          return el;
        });

        if (el[teardownHandlersSymbol]) {
          el[teardownHandlersSymbol].push(teardownBindings);
        }
      }
    }]);

    return StacheElement;
  }( // add lifecycle methods
  // this needs to happen after other mixins that implement these methods
  // so that this.<lifecycleMethod> is the actual lifecycle method which
  // controls whether the methods farther "down" the chain are called
  mixinLifecycleMethods( // mixin .bindings() method and behavior
  mixinBindings( // mix in viewModel symbol used by can-stache-bindings
  mixinViewModelSymbol( // mix in stache renderer from `static view` property
  mixinStacheView( // add getters/setters from `static props` property
  mixinProps(BaseElement))))));

  function StacheElementConstructorFunction() {
    var self = Reflect.construct(StacheElement, arguments, this.constructor);
    return self;
  }

  StacheElementConstructorFunction.prototype = Object.create(StacheElement.prototype);
  StacheElementConstructorFunction.prototype.constructor = StacheElementConstructorFunction;
  return StacheElementConstructorFunction;
}

module.exports = DeriveElement();