"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var QUnit = require("steal-qunit");

var stache = require("can-stache");

var mixinStacheView = require("./mixin-stache-view");

var browserSupports = require("../test/browser-supports");

var nodeLists = require("can-view-nodelist");

QUnit.module("can-stache-element - mixin-stache-view");

if (browserSupports.customElements) {
  QUnit.test("basics", function (assert) {
    var StacheElement =
    /*#__PURE__*/
    function (_mixinStacheView) {
      _inherits(StacheElement, _mixinStacheView);

      function StacheElement() {
        _classCallCheck(this, StacheElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(StacheElement).apply(this, arguments));
      }

      return StacheElement;
    }(mixinStacheView(HTMLElement));

    var App =
    /*#__PURE__*/
    function (_StacheElement) {
      _inherits(App, _StacheElement);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "{{greeting}} World";
        }
      }]);

      function App() {
        var _this;

        _classCallCheck(this, App);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
        _this.greeting = "Hello";
        return _this;
      }

      return App;
    }(StacheElement);

    customElements.define("stache-app", App);
    var app = new App();
    assert.equal(_typeof(app.render), "function", "mixin adds a render method on class instances");
    app.render();
    assert.equal(app.innerHTML, "Hello World", "render method renders the static `view` property as stache");
  });

  if (browserSupports.shadowDOM) {
    QUnit.test("can render into shadowDOM", function (assert) {
      var StacheElement =
      /*#__PURE__*/
      function (_mixinStacheView2) {
        _inherits(StacheElement, _mixinStacheView2);

        function StacheElement() {
          _classCallCheck(this, StacheElement);

          return _possibleConstructorReturn(this, _getPrototypeOf(StacheElement).apply(this, arguments));
        }

        return StacheElement;
      }(mixinStacheView(HTMLElement));

      var App =
      /*#__PURE__*/
      function (_StacheElement2) {
        _inherits(App, _StacheElement2);

        _createClass(App, null, [{
          key: "view",
          get: function get() {
            return "{{greeting}} World";
          }
        }]);

        function App() {
          var _this2;

          _classCallCheck(this, App);

          _this2 = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
          _this2.viewRoot = _this2.attachShadow({
            mode: "open"
          });
          _this2.greeting = "Hello";
          return _this2;
        }

        return App;
      }(StacheElement);

      customElements.define("stache-shadow-dom-app", App);
      var app = new App();
      assert.equal(_typeof(app.render), "function", "mixin adds a render method on class instances");
      app.render();
      assert.equal(app.shadowRoot.innerHTML, "Hello World", "render method renders the static `view` property as stache");
    });
  }

  QUnit.test("caches renderer function", function (assert) {
    assert.expect(3);

    var App =
    /*#__PURE__*/
    function (_mixinStacheView3) {
      _inherits(App, _mixinStacheView3);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          assert.ok(true, "view property read");
          return "{{greeting}} World";
        }
      }]);

      function App() {
        var _this3;

        _classCallCheck(this, App);

        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
        _this3.greeting = "Hello";
        return _this3;
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-caches-view-app", App);
    var app = new App();
    app.render();
    assert.equal(app.innerHTML, "Hello World", "renders first app");
    var app2 = new App();
    app2.render();
    assert.equal(app2.innerHTML, "Hello World", "renders second app");
  });
  QUnit.test("can be passed a renderer function as the view", function (assert) {
    var renderer = stache("{{greeting}} World");

    var App =
    /*#__PURE__*/
    function (_mixinStacheView4) {
      _inherits(App, _mixinStacheView4);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return renderer;
        }
      }]);

      function App() {
        var _this4;

        _classCallCheck(this, App);

        _this4 = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
        _this4.greeting = "Hello";
        return _this4;
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-renderer-app", App);
    var app = new App();
    app.render();
    assert.equal(app.innerHTML, "Hello World", "render method renders the static `view` property as stache");
  });
  QUnit.test("renderer is passed options object and nodelist if provided", function (assert) {
    var options = {
      some: "options"
    };
    var nodelist = nodeLists.register([], function () {}, true, false);

    var renderer = function renderer(el, optionsArg, nodelistArg) {
      assert.equal(optionsArg, options, "options");
      assert.deepEqual(nodelistArg, nodelist, "nodelist like object");
      return document.createElement("p");
    };

    var App =
    /*#__PURE__*/
    function (_mixinStacheView5) {
      _inherits(App, _mixinStacheView5);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return renderer;
        }
      }]);

      function App() {
        _classCallCheck(this, App);

        return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-renderer-args-app", App);
    var app = new App();
    app.render({}, options, nodelist);
  });
  QUnit.test("element works without a `view`", function (assert) {
    var App =
    /*#__PURE__*/
    function (_mixinStacheView6) {
      _inherits(App, _mixinStacheView6);

      function App() {
        _classCallCheck(this, App);

        return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-no-renderer-app", App);
    var app = new App();
    app.render({});
    assert.ok(true, "doesn't throw");
  });
}