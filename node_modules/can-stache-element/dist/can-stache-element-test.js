"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var QUnit = require("steal-qunit");

var Scope = require("can-view-scope");

var viewCallbacks = require("can-view-callbacks");

var stache = require("can-stache");

var SimpleObservable = require("can-simple-observable");

var StacheElement = require("./can-stache-element");

var browserSupports = require("../test/browser-supports");

var canReflect = require("can-reflect");

var dev = require("can-test-helpers").dev;

QUnit.module("can-stache-element");

if (browserSupports.customElements) {
  QUnit.test("basics", function (assert) {
    var fixture = document.querySelector("#qunit-fixture");

    var Input =
    /*#__PURE__*/
    function (_StacheElement) {
      _inherits(Input, _StacheElement);

      function Input() {
        _classCallCheck(this, Input);

        return _possibleConstructorReturn(this, _getPrototypeOf(Input).apply(this, arguments));
      }

      _createClass(Input, [{
        key: "handleChange",
        value: function handleChange(val) {
          // call the handler passed in through bindings
          this.handler(val);
        }
      }], [{
        key: "view",
        get: function get() {
          return "<p><input value:bind=\"this.inputValue\" on:change=\"this.handleChange(scope.element.value)\"></p>";
        }
      }]);

      return Input;
    }(StacheElement);

    customElements.define("in-put", Input);

    var Basic =
    /*#__PURE__*/
    function (_StacheElement2) {
      _inherits(Basic, _StacheElement2);

      function Basic() {
        _classCallCheck(this, Basic);

        return _possibleConstructorReturn(this, _getPrototypeOf(Basic).apply(this, arguments));
      }

      _createClass(Basic, [{
        key: "setFirst",
        value: function setFirst(val) {
          this.first = val;
        }
      }, {
        key: "setLast",
        value: function setLast(val) {
          this.last = val;
        }
      }, {
        key: "fullName",
        get: function get() {
          return "".concat(this.first, " ").concat(this.last);
        }
      }], [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<in-put inputValue:bind=\"this.first\" handler:from=\"this.setFirst\"></in-put>\n\t\t\t\t\t<in-put inputValue:bind=\"this.last\" handler:from=\"this.setLast\"></in-put>\n\t\t\t\t\t<p>{{this.fullName}}</p>\n\t\t\t\t";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            first: {
              type: String,
              default: "Kevin"
            },
            last: {
              type: String,
              default: "McCallister"
            }
          };
        }
      }]);

      return Basic;
    }(StacheElement);

    customElements.define("basic-app", Basic);
    var el = document.createElement("basic-app");
    fixture.appendChild(el);
    var inputs = el.querySelectorAll("input");
    var firstNameInput = inputs[0];
    var lastNameInput = inputs[1];
    var fullNameP = el.querySelectorAll("p")[2];
    assert.equal(firstNameInput.value, "Kevin", "firstName input has correct default value");
    assert.equal(lastNameInput.value, "McCallister", "lastName input has correct default value");
    assert.equal(fullNameP.innerHTML, "Kevin McCallister", "fullName paragraph has correct default value");
    firstNameInput.value = "Marty";
    firstNameInput.dispatchEvent(new Event("change"));
    assert.equal(fullNameP.innerHTML, "Marty McCallister", "fullName paragraph changes when firstName input changes");
    lastNameInput.value = "McFly";
    lastNameInput.dispatchEvent(new Event("change"));
    assert.equal(fullNameP.innerHTML, "Marty McFly", "fullName paragraph changes when lastName input changes");
  });
  QUnit.test("can be rendered by canViewCallbacks.tagHandler", function (assert) {
    var App =
    /*#__PURE__*/
    function (_StacheElement3) {
      _inherits(App, _StacheElement3);

      function App() {
        _classCallCheck(this, App);

        return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));
      }

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "Hello {{greeting}}";
        }
      }]);

      return App;
    }(StacheElement);

    customElements.define("stache-viewcallbacks-app", App);
    var el = document.createElement("stache-viewcallbacks-app");
    el.setAttribute("greeting:bind", "greeting");
    var scope = new Scope({
      greeting: "World"
    });
    viewCallbacks.tagHandler(el, "stache-viewcallbacks-app", {
      scope: scope
    });
    assert.equal(el.innerHTML, "Hello World");
  });
  QUnit.test("Can initialize with el.initialize()", function (assert) {
    var El =
    /*#__PURE__*/
    function (_StacheElement4) {
      _inherits(El, _StacheElement4);

      function El() {
        _classCallCheck(this, El);

        return _possibleConstructorReturn(this, _getPrototypeOf(El).apply(this, arguments));
      }

      _createClass(El, null, [{
        key: "props",
        get: function get() {
          return {
            prop: "default"
          };
        }
      }]);

      return El;
    }(StacheElement);

    customElements.define("stache-element-initialized", El);
    var el = new El();
    el.initialize({
      prop: "value"
    });
    assert.equal(el.prop, "value", "initialized with values provided to initialize");
  });
  QUnit.test("programatically instantiated elements get disconnected when removed", function (assert) {
    var done = assert.async();

    var Person =
    /*#__PURE__*/
    function (_StacheElement5) {
      _inherits(Person, _StacheElement5);

      function Person() {
        _classCallCheck(this, Person);

        return _possibleConstructorReturn(this, _getPrototypeOf(Person).apply(this, arguments));
      }

      _createClass(Person, [{
        key: "disconnected",
        value: function disconnected() {
          assert.ok(true, "connected");
          done();
        }
      }], [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<p>person</p>\n\t\t\t\t";
        }
      }]);

      return Person;
    }(StacheElement);

    customElements.define("per-son", Person);

    var App =
    /*#__PURE__*/
    function (_StacheElement6) {
      _inherits(App, _StacheElement6);

      function App() {
        _classCallCheck(this, App);

        return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));
      }

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{{#if(person)}}\n\t\t\t\t\t\t\t{{{person}}}\n\t\t\t\t\t\t{{/if}}\n\t\t\t\t\t</p>\n\t\t\t\t";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            showPerson: true,
            person: {
              get: function get() {
                if (this.showPerson) {
                  var person = new Person();
                  person.connect();
                  return person;
                }
              }
            }
          };
        }
      }]);

      return App;
    }(StacheElement);

    customElements.define("person-app", App);
    var app = new App();
    app.connect();
    var nameDiv = app.querySelector("per-son p");
    assert.equal(nameDiv.innerHTML, "person");
    app.showPerson = false;
  });
  QUnit.test("element can be used directly in a stache view", function (assert) {
    var fixture = document.querySelector("#qunit-fixture");
    assert.expect(2);
    var done = assert.async();
    var show = new SimpleObservable(false);

    var El =
    /*#__PURE__*/
    function (_StacheElement7) {
      _inherits(El, _StacheElement7);

      function El() {
        _classCallCheck(this, El);

        return _possibleConstructorReturn(this, _getPrototypeOf(El).apply(this, arguments));
      }

      _createClass(El, [{
        key: "connected",
        value: function connected() {
          assert.ok(true, "connected");
        }
      }, {
        key: "disconnected",
        value: function disconnected() {
          assert.ok(true, "disconnected");
          done();
        }
      }]);

      return El;
    }(StacheElement);

    customElements.define("stache-el-in-stache", El);
    var el = new El();
    var frag = stache("\n\t\t\t<div>\n\t\t\t{{#if(show)}}\n\t\t\t\t{{el}}\n\t\t\t{{/if}}\n\t\t\t</div>\n\t\t")({
      el: el,
      show: show
    }); // viewInsert

    show.value = true; // connect

    fixture.appendChild(frag); // teardown

    show.value = false;
  });
  QUnit.test("addEventListener and removeEventListener work for DOM events", function (assert) {
    var done = assert.async();

    var El =
    /*#__PURE__*/
    function (_StacheElement8) {
      _inherits(El, _StacheElement8);

      function El() {
        _classCallCheck(this, El);

        return _possibleConstructorReturn(this, _getPrototypeOf(El).apply(this, arguments));
      }

      return El;
    }(StacheElement);

    customElements.define("add-event-listener-el", El);
    var el = new El();
    el.addEventListener("an-event", function handler() {
      el.removeEventListener("an-event", handler);
      el.dispatchEvent(new Event("an-event"));
      assert.ok(true, "addEventListener works");
      done();
    });
    el.dispatchEvent(new Event("an-event"));
  });
  QUnit.test("value() updates", function (assert) {
    var Foo =
    /*#__PURE__*/
    function (_StacheElement9) {
      _inherits(Foo, _StacheElement9);

      function Foo() {
        _classCallCheck(this, Foo);

        return _possibleConstructorReturn(this, _getPrototypeOf(Foo).apply(this, arguments));
      }

      _createClass(Foo, null, [{
        key: "view",
        get: function get() {
          return '<span>{{second}}</span>';
        }
      }, {
        key: "props",
        get: function get() {
          return {
            first: "one",
            second: {
              value: function value(_ref) {
                var listenTo = _ref.listenTo,
                    resolve = _ref.resolve;
                resolve(this.first);
                listenTo("first", function (ev, val) {
                  resolve(val);
                });
              }
            }
          };
        }
      }]);

      return Foo;
    }(StacheElement);

    customElements.define('value-should-update', Foo);
    var updated = false;
    var foo = new Foo();
    foo.connect();
    canReflect.onKeyValue(foo, "second", function () {
      updated = true;
    });
    assert.equal(foo.second, "one", "initial value");
    foo.first = "two";
    assert.ok(updated, "onKeyValue called");
    assert.equal(foo.second, "two", "updated"); // Verify it works when there are multiple instances

    var foo2 = new Foo();
    foo2.connect();
    updated = false;
    canReflect.onKeyValue(foo2, "second", function () {
      updated = true;
    });
    assert.equal(foo2.second, "one", "initial value");
    foo2.first = "two";
    assert.ok(updated, "onKeyValue called");
    assert.equal(foo2.second, "two", "updated");
  });
  dev.devOnlyTest("Warns when a property matches an event name", function (assert) {
    var ClickPropEl =
    /*#__PURE__*/
    function (_StacheElement10) {
      _inherits(ClickPropEl, _StacheElement10);

      function ClickPropEl() {
        _classCallCheck(this, ClickPropEl);

        return _possibleConstructorReturn(this, _getPrototypeOf(ClickPropEl).apply(this, arguments));
      }

      _createClass(ClickPropEl, null, [{
        key: "props",
        get: function get() {
          return {
            click: String,

            get other() {
              throw new Error('Don\'t get me');
            }

          };
        }
      }]);

      return ClickPropEl;
    }(StacheElement);

    customElements.define("click-prop-should-warn", ClickPropEl);
    var undo = dev.willWarn(/click/);
    new ClickPropEl();
    assert.equal(undo(), 1, "Warned for the 'click' prop");
  });
}