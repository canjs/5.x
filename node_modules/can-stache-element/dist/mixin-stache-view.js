"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var stache = require("can-stache");

var nodeLists = require("can-view-nodelist");

var childNodes = require("can-child-nodes");

var domMutateNode = require("can-dom-mutate/node"); // make sure bindings work


require("can-stache-bindings");

var rendererSymbol = Symbol.for("can.stacheRenderer");
var metaSymbol = Symbol.for("can.meta");
var viewInsertSymbol = Symbol.for("can.viewInsert");

function ensureMeta(obj) {
  var meta = obj[metaSymbol];

  if (meta === undefined) {
    meta = {};
    Object.defineProperty(obj, metaSymbol, {
      value: meta,
      enumerable: true
    });
  }

  return meta;
}

module.exports = function mixinStacheView() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  return (
    /*#__PURE__*/
    function (_Base) {
      _inherits(StacheClass, _Base);

      function StacheClass() {
        _classCallCheck(this, StacheClass);

        return _possibleConstructorReturn(this, _getPrototypeOf(StacheClass).apply(this, arguments));
      }

      _createClass(StacheClass, [{
        key: "render",
        value: function render(props, renderOptions, parentNodeList) {
          var _this = this;

          if (_get(_getPrototypeOf(StacheClass.prototype), "render", this)) {
            _get(_getPrototypeOf(StacheClass.prototype), "render", this).call(this, props);
          }

          var renderer = this.constructor[rendererSymbol];

          if (!renderer) {
            var view = this.constructor.view;
            renderer = typeof view === "function" ? view : stache(view || "");
            this.constructor[rendererSymbol] = renderer;
          }

          var meta = ensureMeta(this);
          var nodeList = meta._nodeList = nodeLists.register([], function () {
            // if disconnect called unregister, don't call disconnect again
            if (meta.skipDisconnect) {
              return;
            }

            meta.skipNodeListUnregister = true;

            _this.disconnect();

            meta.skipNodeListUnregister = false;
          }, parentNodeList || true, false);
          nodeList.expression = "<" + this.localName + ">";
          var frag = renderer(this, renderOptions, nodeList);
          var viewRoot = this.viewRoot || this;
          domMutateNode.appendChild.call(viewRoot, frag);
          nodeLists.update(nodeList, childNodes(viewRoot)); // if element has already been inserted into the view,
          // add its nodelist to the parent nodelist after rendering

          if (meta._viewDataNodeList) {
            meta._viewDataNodeList.newDeepChildren.push(nodeList);
          }
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          var meta = this[metaSymbol]; // if unregister called disconnect, don't call unregister again

          if (meta._nodeList && !meta.skipNodeListUnregister) {
            meta.skipDisconnect = true;
            nodeLists.unregister(meta._nodeList);
            meta.skipDisconnect = false;
            meta._nodeList = null;
          }

          if (_get(_getPrototypeOf(StacheClass.prototype), "disconnect", this)) {
            _get(_getPrototypeOf(StacheClass.prototype), "disconnect", this).call(this);
          }
        }
      }, {
        key: viewInsertSymbol,
        value: function value(viewData) {
          var meta = ensureMeta(this);
          var nodeList = meta._nodeList; // if element has already been rendered, add its nodeList
          // to the new parentNodeList.
          // Otherwise, store the parent nodelist so the element's
          // nodelist can be added to it in render.

          if (nodeList) {
            viewData.nodeList.newDeepChildren.push(nodeList);
          } else {
            meta._viewDataNodeList = viewData.nodeList;
          }

          return this;
        }
      }]);

      return StacheClass;
    }(Base)
  );
};