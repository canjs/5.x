"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var defineLazyValue = require("can-define-lazy-value");

var viewModelSymbol = Symbol.for("can.viewModel");

module.exports = function mixinViewModelSymbol() {
  var BaseClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;

  var ViewModelClass =
  /*#__PURE__*/
  function (_BaseClass) {
    _inherits(ViewModelClass, _BaseClass);

    function ViewModelClass() {
      _classCallCheck(this, ViewModelClass);

      return _possibleConstructorReturn(this, _getPrototypeOf(ViewModelClass).apply(this, arguments));
    }

    return ViewModelClass;
  }(BaseClass); // can-stache-bindings uses viewModel symbol


  defineLazyValue(ViewModelClass.prototype, viewModelSymbol, function () {
    return this;
  });
  return ViewModelClass;
};