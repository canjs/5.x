"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var lifecycleStatusSymbol = Symbol.for("can.lifecycleStatus");
var inSetupSymbol = Symbol.for("can.initializing");
var teardownHandlersSymbol = Symbol.for("can.teardownHandlers");

function defineConfigurableNonEnumerable(obj, prop, value) {
  Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: value
  });
}

module.exports = function mixinLifecycleMethods() {
  var BaseElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  return (
    /*#__PURE__*/
    function (_BaseElement) {
      _inherits(LifecycleElement, _BaseElement);

      function LifecycleElement() {
        var _this;

        _classCallCheck(this, LifecycleElement);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(LifecycleElement).call(this));

        if (arguments.length) {
          throw new Error("can-stache-element: Do not pass arguments to the constructor. Initial property values should be passed to the `initialize` hook.");
        } // add inSetup symbol to prevent events being dispatched


        defineConfigurableNonEnumerable(_assertThisInitialized(_this), inSetupSymbol, true); // add lifecycle status symbol

        defineConfigurableNonEnumerable(_assertThisInitialized(_this), lifecycleStatusSymbol, {
          initialized: false,
          rendered: false,
          connected: false,
          disconnected: false
        }); // add a place to store additional teardownHandlers

        defineConfigurableNonEnumerable(_assertThisInitialized(_this), teardownHandlersSymbol, []);
        return _this;
      } // custom element lifecycle methods


      _createClass(LifecycleElement, [{
        key: "connectedCallback",
        value: function connectedCallback(props) {
          this.initialize(props);
          this.render();
          this.connect();
          return this;
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          this.disconnect();
          return this;
        } // custom lifecycle methods

      }, {
        key: "initialize",
        value: function initialize(props) {
          var lifecycleStatus = this[lifecycleStatusSymbol];

          if (lifecycleStatus.initialized) {
            return this;
          } // Overwrite ... this means that this initialize
          // can't be inherited (super.initialize).


          this[inSetupSymbol] = true;

          if (_get(_getPrototypeOf(LifecycleElement.prototype), "initialize", this)) {
            _get(_getPrototypeOf(LifecycleElement.prototype), "initialize", this).call(this, props);
          }

          this[inSetupSymbol] = false;
          lifecycleStatus.initialized = true;
          return this;
        }
      }, {
        key: "render",
        value: function render(props) {
          var lifecycleStatus = this[lifecycleStatusSymbol];

          if (lifecycleStatus.rendered) {
            return this;
          }

          if (!lifecycleStatus.initialized) {
            this.initialize(props);
          }

          if (_get(_getPrototypeOf(LifecycleElement.prototype), "render", this)) {
            _get(_getPrototypeOf(LifecycleElement.prototype), "render", this).call(this, props);
          }

          lifecycleStatus.rendered = true;
          return this;
        }
      }, {
        key: "connect",
        value: function connect(props) {
          var lifecycleStatus = this[lifecycleStatusSymbol];

          if (lifecycleStatus.connected) {
            return this;
          }

          if (!lifecycleStatus.initialized) {
            this.initialize(props);
          }

          if (!lifecycleStatus.rendered) {
            this.render(props);
          }

          if (_get(_getPrototypeOf(LifecycleElement.prototype), "connect", this)) {
            _get(_getPrototypeOf(LifecycleElement.prototype), "connect", this).call(this, props);
          }

          if (this.connected) {
            var connectedTeardown = this.connected();

            if (typeof connectedTeardown === "function") {
              this[teardownHandlersSymbol].push(connectedTeardown);
            }
          }

          lifecycleStatus.connected = true;
          return this;
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          var lifecycleStatus = this[lifecycleStatusSymbol];

          if (lifecycleStatus.disconnected) {
            return this;
          }

          if (_get(_getPrototypeOf(LifecycleElement.prototype), "disconnect", this)) {
            _get(_getPrototypeOf(LifecycleElement.prototype), "disconnect", this).call(this);
          }

          if (this.stopListening) {
            this.stopListening();
          }

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this[teardownHandlersSymbol][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var handler = _step.value;
              handler.call(this);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (this.disconnected) {
            this.disconnected();
          }

          lifecycleStatus.disconnected = true;
          return this;
        }
      }]);

      return LifecycleElement;
    }(BaseElement)
  );
};