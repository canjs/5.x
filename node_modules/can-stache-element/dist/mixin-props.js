"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require("can-observable-mixin"),
    mixinElement = _require.mixinElement;

var canReflect = require("can-reflect");

var canLogDev = require("can-log/dev/dev");

var eventTargetInstalledSymbol = Symbol.for("can.eventTargetInstalled");

module.exports = function mixinDefine() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  var realAddEventListener = Base.prototype.addEventListener;
  var realRemoveEventListener = Base.prototype.removeEventListener;

  function installEventTarget(Type) {
    if (Type[eventTargetInstalledSymbol]) {
      return;
    }

    var eventQueueAddEventListener = Type.prototype.addEventListener;
    var eventQueueRemoveEventListener = Type.prototype.removeEventListener;

    Type.prototype.addEventListener = function () {
      eventQueueAddEventListener.apply(this, arguments);
      return realAddEventListener.apply(this, arguments);
    };

    Type.prototype.removeEventListener = function () {
      eventQueueRemoveEventListener.apply(this, arguments);
      return realRemoveEventListener.apply(this, arguments);
    };

    Type[eventTargetInstalledSymbol] = true; // Warn on special properties
    //!steal-remove-start

    if (process.env.NODE_ENV !== 'production') {
      // look for `static props`and fall back to `static define` if `props` doesn't exist
      var props = _typeof(Type.props) === "object" ? Type.props : _typeof(Type.define) === "object" ? Type.define : {};
      Object.keys(props).forEach(function (key) {
        if ("on" + key in Type.prototype) {
          canLogDev.warn("".concat(canReflect.getName(Type), ": The defined property [").concat(key, "] matches the name of a DOM event. This property could update unexpectedly. Consider renaming."));
        }
      });
    } //!steal-remove-end

  }

  var DefinedClass =
  /*#__PURE__*/
  function (_mixinElement) {
    _inherits(DefinedClass, _mixinElement);

    function DefinedClass() {
      var _this;

      _classCallCheck(this, DefinedClass);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DefinedClass).call(this));
      installEventTarget(_this.constructor);
      return _this;
    }

    _createClass(DefinedClass, [{
      key: "intialize",
      value: function intialize(props) {
        _get(_getPrototypeOf(DefinedClass.prototype), "intialize", this).call(this, props);
      }
    }]);

    return DefinedClass;
  }(mixinElement(Base));

  return DefinedClass;
};