"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var defineBehavior = require("./define");

var ObservationRecorder = require("can-observation-recorder");

var canSymbol = require("can-symbol");

var eventDispatcher = defineBehavior.make.set.eventDispatcher;
var inSetupSymbol = canSymbol.for("can.initializing");

var canLogDev = require("can-log/dev/dev"); // A bug in Safari means that __proto__ key is sent. This causes problems
// When addEventListener is called on a non-element.
// https://github.com/tc39/test262/pull/2203


var isProtoReadOnSuper = false;

(function () {
  if (typeof Proxy === "function") {
    var par =
    /*#__PURE__*/
    function () {
      function par() {
        _classCallCheck(this, par);
      }

      _createClass(par, [{
        key: "fn",
        value: function fn() {}
      }]);

      return par;
    }();

    var base = new Proxy(par, {
      get: function get(t, k, r) {
        if (k === "__proto__") {
          isProtoReadOnSuper = true;
        }

        return Reflect.get(t, k, r);
      }
    });

    var chi =
    /*#__PURE__*/
    function (_base) {
      _inherits(chi, _base);

      function chi() {
        _classCallCheck(this, chi);

        return _possibleConstructorReturn(this, _getPrototypeOf(chi).apply(this, arguments));
      }

      _createClass(chi, [{
        key: "fn",
        value: function fn() {
          _get(_getPrototypeOf(chi.prototype), "fn", this).call(this);
        }
      }]);

      return chi;
    }(base);

    new chi().fn();
  }
})();

var wasLogged = false;

function logNotSupported() {
  if (!wasLogged && typeof Proxy !== "function") {
    wasLogged = true;
    canLogDev.warn("can-observable-mixin/mixin-proxy requires ES Proxies which are not supported by your JS runtime.");
  }
}

function proxyPrototype(Base) {
  var instances = new WeakSet();

  function LateDefined() {
    //!steal-remove-start
    if (process.env.NODE_ENV !== "production") {
      logNotSupported();
    } //!steal-remove-end


    var inst = Reflect.construct(Base, arguments, this instanceof LateDefined ? this.constructor : void 0);
    instances.add(inst);
    return inst;
  }

  var underlyingPrototypeObject = Object.create(Base.prototype);
  var getHandler = isProtoReadOnSuper ? function (target, key, receiver) {
    if (!this[inSetupSymbol] && _typeof(key) !== "symbol" && key !== "__proto__") {
      ObservationRecorder.add(receiver, key);
    }

    return Reflect.get(target, key, receiver);
  } : function (target, key, receiver) {
    if (!this[inSetupSymbol] && _typeof(key) !== "symbol") {
      ObservationRecorder.add(receiver, key);
    }

    return Reflect.get(target, key, receiver);
  };
  var proxyHandlers = {
    get: getHandler,
    set: function set(target, key, value, receiver) {
      // Symbols are not observable, so just set the value
      if (_typeof(key) === "symbol") {
        Reflect.set(target, key, value, receiver);
        return true;
      } // We decided to punt on making the prototype observable, so anything
      // set on a prototype just gets set.


      if (key in target || !instances.has(receiver)) {
        var current = Reflect.get(target, key, receiver);
        Reflect.set(target, key, value, receiver);
        eventDispatcher(receiver, key, current, value);
      } else {
        defineBehavior.expando(receiver, key, value);
      }

      return true;
    }
  };
  LateDefined.prototype = typeof Proxy === "function" ? new Proxy(underlyingPrototypeObject, proxyHandlers) : underlyingPrototypeObject;
  return LateDefined;
}

module.exports = proxyPrototype;