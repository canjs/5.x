"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("./define"),
    hooks = _require.hooks,
    makeDefineInstanceKey = _require.makeDefineInstanceKey;

var mixinMapProps = require("./mixin-mapprops");

var mixinProxy = require("./mixin-proxy");

var mixinTypeEvents = require("./mixin-typeevents");

var constructorPropsSymbol = Symbol.for("can.constructorProps");
var renderedSymbol = Symbol.for("can.rendered");

module.exports = function mixinElement(BaseElement) {
  var Element =
  /*#__PURE__*/
  function (_mixinProxy) {
    _inherits(Element, _mixinProxy);

    function Element(props) {
      var _this;

      _classCallCheck(this, Element);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Element).call(this));
      hooks.finalizeClass(_this.constructor);
      _this[constructorPropsSymbol] = props;
      return _this;
    }

    _createClass(Element, [{
      key: "initialize",
      value: function initialize(props) {
        if (_get(_getPrototypeOf(Element.prototype), "initialize", this)) {
          _get(_getPrototypeOf(Element.prototype), "initialize", this).call(this, props);
        }

        hooks.initialize(this, props || this[constructorPropsSymbol]);
      }
    }, {
      key: "render",
      value: function render(props) {
        if (_get(_getPrototypeOf(Element.prototype), "render", this)) {
          _get(_getPrototypeOf(Element.prototype), "render", this).call(this, props);
        }

        hooks.initialize(this, props || this[constructorPropsSymbol]);
        this[renderedSymbol] = true;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (_get(_getPrototypeOf(Element.prototype), "connectedCallback", this)) {
          _get(_getPrototypeOf(Element.prototype), "connectedCallback", this).call(this);
        }

        if (!this[renderedSymbol]) {
          this.render();
        }
      }
    }]);

    return Element;
  }(mixinProxy(BaseElement));

  Element = mixinTypeEvents(mixinMapProps(Element));
  makeDefineInstanceKey(Element);
  return Element;
};