"use strict";

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var addDefinedProps = require("./define");

var updateSchemaKeys = addDefinedProps.updateSchemaKeys,
    hooks = addDefinedProps.hooks;

var defineHelpers = require("./define-helpers");

var ObservationRecorder = require("can-observation-recorder");

var canLogDev = require("can-log/dev/dev");

var canReflect = require("can-reflect");

var queues = require("can-queues");

var getSchemaSymbol = Symbol.for("can.getSchema");

function keysForDefinition(definitions) {
  var keys = [];

  for (var prop in definitions) {
    var definition = definitions[prop];

    if (_typeof(definition) !== "object" || ("serialize" in definition ? !!definition.serialize : !definition.get)) {
      keys.push(prop);
    }
  }

  return keys;
}

function _assign(source) {
  queues.batch.start();
  canReflect.assignMap(this, source || {});
  queues.batch.stop();
}

function _update(source) {
  queues.batch.start();
  canReflect.updateMap(this, source || {});
  queues.batch.stop();
}

function _assignDeep(source) {
  queues.batch.start(); // TODO: we should probably just throw an error instead of cleaning

  canReflect.assignDeepMap(this, source || {});
  queues.batch.stop();
}

function _updateDeep(source) {
  queues.batch.start(); // TODO: we should probably just throw an error instead of cleaning

  canReflect.updateDeepMap(this, source || {});
  queues.batch.stop();
}

function setKeyValue(key, value) {
  var defined = defineHelpers.defineExpando(this, key, value);

  if (!defined) {
    this[key] = value;
  }
}

function getKeyValue(key) {
  var value = this[key];

  if (value !== undefined || key in this || Object.isSealed(this)) {
    return value;
  } else {
    ObservationRecorder.add(this, key);
    return this[key];
  }
}

module.exports = function (Type) {
  return (
    /*#__PURE__*/
    function (_Type) {
      _inherits(_class, _Type);

      function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
      }

      _createClass(_class, [{
        key: "get",
        value: function get(prop) {
          if (prop) {
            return getKeyValue.call(this, prop);
          } else {
            return canReflect.unwrap(this, Map);
          }
        }
      }, {
        key: "set",
        value: function set(prop, value) {
          if (_typeof(prop) === "object") {
            //!steal-remove-start
            if (process.env.NODE_ENV !== 'production') {
              canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
            } //!steal-remove-end


            if (value === true) {
              _updateDeep.call(this, prop);
            } else {
              _assignDeep.call(this, prop);
            }
          } else {
            setKeyValue.call(this, prop, value);
          }

          return this;
        }
      }, {
        key: "assignDeep",
        value: function assignDeep(prop) {
          _assignDeep.call(this, prop);

          return this;
        }
      }, {
        key: "updateDeep",
        value: function updateDeep(prop) {
          _updateDeep.call(this, prop);

          return this;
        }
      }, {
        key: "assign",
        value: function assign(prop) {
          _assign.call(this, prop);

          return this;
        }
      }, {
        key: "update",
        value: function update(prop) {
          _update.call(this, prop);

          return this;
        }
      }, {
        key: "serialize",
        value: function serialize() {
          return canReflect.serialize(this, Map);
        }
      }, {
        key: "deleteKey",
        value: function deleteKey() {
          return defineHelpers.deleteKey.apply(this, arguments);
        }
      }, {
        key: "forEach",
        value: function forEach(cb, thisarg, observe) {
          function forEach(list, cb, thisarg) {
            return canReflect.eachKey(list, cb, thisarg);
          }

          if (observe === false) {
            ObservationRecorder.ignore(forEach)(this, cb, thisarg);
          } else {
            return forEach(this, cb, thisarg);
          }
        }
      }, {
        key: Symbol.for("can.getKeyValue"),
        value: function value() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return getKeyValue.apply(this, args);
        }
      }, {
        key: Symbol.for("can.deleteKeyValue"),
        value: function value() {
          var _defineHelpers$delete;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return (_defineHelpers$delete = defineHelpers.deleteKey).call.apply(_defineHelpers$delete, [this].concat(args));
        }
      }, {
        key: Symbol.for("can.getOwnKeys"),
        value: function value() {
          var keys = canReflect.getOwnEnumerableKeys(this);

          if (this._computed) {
            var computedKeys = canReflect.getOwnKeys(this._computed);
            var key;

            for (var i = 0; i < computedKeys.length; i++) {
              key = computedKeys[i];

              if (keys.indexOf(key) < 0) {
                keys.push(key);
              }
            }
          }

          return keys;
        }
      }, {
        key: Symbol.for("can.getOwnEnumerableKeys"),
        value: function value() {
          ObservationRecorder.add(this, 'can.keys');
          ObservationRecorder.add(Object.getPrototypeOf(this), 'can.keys');
          return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        }
      }, {
        key: Symbol.for("can.serialize"),
        value: function value() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return defineHelpers.reflectSerialize.apply(this, args);
        }
      }, {
        key: Symbol.for("can.hasKey"),
        value: function value(key) {
          return key in this._define.definitions || this._instanceDefinitions !== undefined && key in this._instanceDefinitions;
        }
      }, {
        key: Symbol.for("can.isMapLike"),
        get: function get() {
          return true;
        }
      }, {
        key: Symbol.for("can.isListLike"),
        get: function get() {
          return false;
        }
      }, {
        key: Symbol.for("can.isValueLike"),
        get: function get() {
          return false;
        }
      }], [{
        key: getSchemaSymbol,
        value: function value() {
          hooks.finalizeClass(this);
          var def = this.prototype._define;
          var definitions = def ? def.definitions : {};
          var schema = {
            type: "map",
            identity: [],
            keys: {}
          };
          return updateSchemaKeys(schema, definitions);
        }
      }, {
        key: Symbol.for("can.new"),
        value: function value() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          return _construct(this, args);
        }
      }]);

      return _class;
    }(Type)
  );
};